# irrelevent {{{
set shell sh
set shellopts '-eu'
set ifs "\n"
set cursorpreviewfmt "\033[7;2m"
set mouse
set history false
# }}}

set ratios 2:4:5
set info size
#set drawbox
set sixel
set icons
set previewer '~/.config/lf/previewer'

set promptfmt "\033[35;1m%u\033[0m@\033[35;1m%h\033[0m:\033[32;1m%d\033[0m\033[1m%f\033[0m"
set errorfmt "\033[1;31m"
set statfmt "\033[1;32m%p| \033[35m%u:%g| \033[34m%S| \033[36m-> %l\033[0m"
set rulerfmt "%a| %p| \033[7;31m %m \033[0m| \033[7;33m %c \033[0m| \033[7;35m %s \033[0m| \033[7;34m %f \033[0m| \033[1m%i/%t\033[0m"

# keybinds {{{

# unbinds {{{
map x
map d
map c
# }}}

map e down
map i up

map Q %{{ lf -remote "send $id :cd $OLDPWD; quit" }} # dont change dir on quit
map . set hidden!
map <enter> open
map x cut
map D delete
map a push :mkdir<space>

map <c-f> :fzf_jump

map gq echo '' # to stop throwing `unknown mapping` error
map gh cd ~
map gc cd ~/.config
map gd cd ~/docs
map gD cd ~/downloads
map gm cd ~/media
map gr cd ~/downloads/repos
map gp cd ~/docs/projects


map cq echo ''
map cc copy_to_clipboard fullpath
map cf copy_to_clipboard filename
map cd copy_to_clipboard directory


map X clear
map Y clear

# dedicated keys for file opener actions
#map o &mimeopen $f
#map O $mimeopen --ask $f
# }}}

# define a custom 'open' command {{{
cmd open &{{
	case $(file --mime-type -Lb $f) in
		text/*|application/*json|application/vnd.gentoo.*) lf -remote "send $id \$$EDITOR \$fx";;
		*) notify-send "no mimetype for : $(basename $f)";;
#		*) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
	esac
}}
# }}}

# functions {{{
cmd mkdir %{{
	IFS=" "
	file="$*"
	mkdir -p -- "$file"
	lf -remote "send $id cd \"$(printf '%s' "$file" | sed 's/\\/\\\\/g;s/"/\\"/g')\""
}}

cmd delete ${{
	set -f
	printf "$fx\n"
	printf "delete?[y/n]"
	read ans
	[ "$ans" = "y" ] && rm -rf $fx
}}

# using `&{{` doesn't work so just have to see flicker for now
cmd copy_to_clipboard ${{
	case "$1" in
	"fullpath") text_to_encode="$f" ;;
	"filename") text_to_encode="$(basename $f)" ;;
	"directory") text_to_encode="$(dirname $f)" ;;
	*) exit ;;
	esac

	# osc52 copy
	encoded_text="$(printf "$text_to_encode" | base64)"
	printf "\033]52;c;%s\007" "$encoded_text"
}}

cmd fzf_jump ${{
	res="$(find . -maxdepth 1 | fzf --reverse --header="Jump to location")"
	if [ -n "$res" ]; then
		if [ -d "$res" ]; then
			cmd="cd"
		else
			cmd="select"
		fi
		res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
		lf -remote "send $id $cmd \"$res\""
	fi
}}

cmd extract ${{
	set -f
	case $f in
		*.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
		*.tar.gz|*.tgz) tar xzvf $f;;
		*.tar.xz|*.txz) tar xJvf $f;;
		*.zip) unzip $f;;
		*.rar) 7z x $f;;
		*.7z) 7z x $f;;
 esac
}}
# }}}

# vim:foldmethod=marker
